@page "/admin/areas"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using PhotoChallenge.Domain.DTO.Area
@layout ProfileLayout
@attribute [Authorize(Roles = "Admin")]
@inject HttpClient Http

<h1 class="page-title">
    <span>
        Areas
    </span>
</h1>

@if (!string.IsNullOrEmpty(errorMsg))
{
    <div class="page-error-msg">
        @errorMsg
    </div>
}

<div class="profile-scrolling-area scrolling">
    <div class="row g-2">
        <div class="col-md-4">
            <NavLink href="/admin/areas/new">
                <div class="new-area-item">
                    New area
                </div>
            </NavLink>
        </div>
        @foreach (var area in areas)
        {
            <div class="col-md-4">
                <AreaItem Area="area" IsRemoved="@(removedAreas.Contains(area.Id))" DeleteArea="@DeleteArea" SetError="@SetError" />
            </div>
        }
    </div>
</div>

@code {
    private List<AreaDto> areas = new List<AreaDto>();
    private string errorMsg = string.Empty;
    private List<int> removedAreas = new List<int>();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            areas = await Http.GetFromJsonAsync<List<AreaDto>>("api/area") ?? new List<AreaDto>();
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
    }

    private void DeleteArea(int id)
    {
        var areaToDelete = areas.SingleOrDefault(_ => _.Id == id);

        if (areaToDelete is null)
        {
            errorMsg = "Area is not found";
            return;
        }

        errorMsg = string.Empty;

        removedAreas.Add(id);
        StateHasChanged();
    }

    private void SetError(string error)
    {
        errorMsg = error;
        StateHasChanged();
    }
}
